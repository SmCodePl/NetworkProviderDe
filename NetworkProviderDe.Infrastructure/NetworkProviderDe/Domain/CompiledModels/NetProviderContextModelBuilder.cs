// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace NetworkProviderDe.Infrastructure.NetworkProviderDe.Domain.CompiledModels
{
    public partial class NetProviderContextModel
    {
        partial void Initialize()
        {
            var netArea = NetAreaEntityType.Create(this);
            var product = ProductEntityType.Create(this);
            var productArea = ProductAreaEntityType.Create(this);
            var productType = ProductTypeEntityType.Create(this);

            ProductEntityType.CreateForeignKey1(product, productType);
            ProductAreaEntityType.CreateForeignKey1(productArea, netArea);
            ProductAreaEntityType.CreateForeignKey2(productArea, product);

            NetAreaEntityType.CreateAnnotations(netArea);
            ProductEntityType.CreateAnnotations(product);
            ProductAreaEntityType.CreateAnnotations(productArea);
            ProductTypeEntityType.CreateAnnotations(productType);

            AddAnnotation("ProductVersion", "8.0.7");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var netArea = FindEntityType("NetworkProviderDe.Domain.Entities.NetArea")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            netArea.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var networkProviderDeDomainEntitiesNetAreaTableBase = new TableBase("NetworkProviderDe.Domain.Entities.NetArea", null, relationalModel);
            var accuracyColumnBase = new ColumnBase<ColumnMappingBase>("Accuracy", "int", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("Accuracy", accuracyColumnBase);
            var adminCodeColumnBase = new ColumnBase<ColumnMappingBase>("AdminCode", "nvarchar(2)", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("AdminCode", adminCodeColumnBase);
            var adminCode2ColumnBase = new ColumnBase<ColumnMappingBase>("AdminCode2", "int", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("AdminCode2", adminCode2ColumnBase);
            var adminCode3ColumnBase = new ColumnBase<ColumnMappingBase>("AdminCode3", "int", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("AdminCode3", adminCode3ColumnBase);
            var adminNameColumnBase = new ColumnBase<ColumnMappingBase>("AdminName", "nvarchar(500)", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("AdminName", adminNameColumnBase);
            var areaIdColumnBase = new ColumnBase<ColumnMappingBase>("AreaId", "bigint", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("AreaId", areaIdColumnBase);
            var countryCodeColumnBase = new ColumnBase<ColumnMappingBase>("CountryCode", "nvarchar(2)", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("CountryCode", countryCodeColumnBase);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var latitudeColumnBase = new ColumnBase<ColumnMappingBase>("Latitude", "float", networkProviderDeDomainEntitiesNetAreaTableBase)
            {
                IsNullable = true
            };
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("Latitude", latitudeColumnBase);
            var longitudeColumnBase = new ColumnBase<ColumnMappingBase>("Longitude", "float", networkProviderDeDomainEntitiesNetAreaTableBase)
            {
                IsNullable = true
            };
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("Longitude", longitudeColumnBase);
            var placeNameColumnBase = new ColumnBase<ColumnMappingBase>("PlaceName", "nvarchar(255)", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("PlaceName", placeNameColumnBase);
            var postalCodeColumnBase = new ColumnBase<ColumnMappingBase>("PostalCode", "nvarchar(5)", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("PostalCode", postalCodeColumnBase);
            var updatedAtColumnBase = new ColumnBase<ColumnMappingBase>("UpdatedAt", "datetime2", networkProviderDeDomainEntitiesNetAreaTableBase);
            networkProviderDeDomainEntitiesNetAreaTableBase.Columns.Add("UpdatedAt", updatedAtColumnBase);
            relationalModel.DefaultTables.Add("NetworkProviderDe.Domain.Entities.NetArea", networkProviderDeDomainEntitiesNetAreaTableBase);
            var networkProviderDeDomainEntitiesNetAreaMappingBase = new TableMappingBase<ColumnMappingBase>(netArea, networkProviderDeDomainEntitiesNetAreaTableBase, true);
            networkProviderDeDomainEntitiesNetAreaTableBase.AddTypeMapping(networkProviderDeDomainEntitiesNetAreaMappingBase, false);
            defaultTableMappings.Add(networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)areaIdColumnBase, netArea.FindProperty("AreaId")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accuracyColumnBase, netArea.FindProperty("Accuracy")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)adminCodeColumnBase, netArea.FindProperty("AdminCode")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)adminCode2ColumnBase, netArea.FindProperty("AdminCode2")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)adminCode3ColumnBase, netArea.FindProperty("AdminCode3")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)adminNameColumnBase, netArea.FindProperty("AdminName")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)countryCodeColumnBase, netArea.FindProperty("CountryCode")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, netArea.FindProperty("CreatedAt")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latitudeColumnBase, netArea.FindProperty("Latitude")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)longitudeColumnBase, netArea.FindProperty("Longitude")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)placeNameColumnBase, netArea.FindProperty("PlaceName")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postalCodeColumnBase, netArea.FindProperty("PostalCode")!, networkProviderDeDomainEntitiesNetAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updatedAtColumnBase, netArea.FindProperty("UpdatedAt")!, networkProviderDeDomainEntitiesNetAreaMappingBase);

            var tableMappings = new List<TableMapping>();
            netArea.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var netAreaTable = new Table("NetArea", null, relationalModel);
            var areaIdColumn = new Column("AreaId", "bigint", netAreaTable);
            netAreaTable.Columns.Add("AreaId", areaIdColumn);
            var accuracyColumn = new Column("Accuracy", "int", netAreaTable);
            netAreaTable.Columns.Add("Accuracy", accuracyColumn);
            var adminCodeColumn = new Column("AdminCode", "nvarchar(2)", netAreaTable);
            netAreaTable.Columns.Add("AdminCode", adminCodeColumn);
            var adminCode2Column = new Column("AdminCode2", "int", netAreaTable);
            netAreaTable.Columns.Add("AdminCode2", adminCode2Column);
            var adminCode3Column = new Column("AdminCode3", "int", netAreaTable);
            netAreaTable.Columns.Add("AdminCode3", adminCode3Column);
            var adminNameColumn = new Column("AdminName", "nvarchar(500)", netAreaTable);
            netAreaTable.Columns.Add("AdminName", adminNameColumn);
            var countryCodeColumn = new Column("CountryCode", "nvarchar(2)", netAreaTable);
            netAreaTable.Columns.Add("CountryCode", countryCodeColumn);
            var createdAtColumn = new Column("CreatedAt", "datetime2", netAreaTable);
            netAreaTable.Columns.Add("CreatedAt", createdAtColumn);
            var latitudeColumn = new Column("Latitude", "float", netAreaTable)
            {
                IsNullable = true
            };
            netAreaTable.Columns.Add("Latitude", latitudeColumn);
            var longitudeColumn = new Column("Longitude", "float", netAreaTable)
            {
                IsNullable = true
            };
            netAreaTable.Columns.Add("Longitude", longitudeColumn);
            var placeNameColumn = new Column("PlaceName", "nvarchar(255)", netAreaTable);
            netAreaTable.Columns.Add("PlaceName", placeNameColumn);
            var postalCodeColumn = new Column("PostalCode", "nvarchar(5)", netAreaTable);
            netAreaTable.Columns.Add("PostalCode", postalCodeColumn);
            var updatedAtColumn = new Column("UpdatedAt", "datetime2", netAreaTable);
            netAreaTable.Columns.Add("UpdatedAt", updatedAtColumn);
            var pK_NetArea = new UniqueConstraint("PK_NetArea", netAreaTable, new[] { areaIdColumn });
            netAreaTable.PrimaryKey = pK_NetArea;
            var pK_NetAreaUc = RelationalModel.GetKey(this,
                "NetworkProviderDe.Domain.Entities.NetArea",
                new[] { "AreaId" });
            pK_NetArea.MappedKeys.Add(pK_NetAreaUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_NetAreaUc).Add(pK_NetArea);
            netAreaTable.UniqueConstraints.Add("PK_NetArea", pK_NetArea);
            relationalModel.Tables.Add(("NetArea", null), netAreaTable);
            var netAreaTableMapping = new TableMapping(netArea, netAreaTable, true);
            netAreaTable.AddTypeMapping(netAreaTableMapping, false);
            tableMappings.Add(netAreaTableMapping);
            RelationalModel.CreateColumnMapping(areaIdColumn, netArea.FindProperty("AreaId")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(accuracyColumn, netArea.FindProperty("Accuracy")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(adminCodeColumn, netArea.FindProperty("AdminCode")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(adminCode2Column, netArea.FindProperty("AdminCode2")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(adminCode3Column, netArea.FindProperty("AdminCode3")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(adminNameColumn, netArea.FindProperty("AdminName")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(countryCodeColumn, netArea.FindProperty("CountryCode")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, netArea.FindProperty("CreatedAt")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(latitudeColumn, netArea.FindProperty("Latitude")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(longitudeColumn, netArea.FindProperty("Longitude")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(placeNameColumn, netArea.FindProperty("PlaceName")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(postalCodeColumn, netArea.FindProperty("PostalCode")!, netAreaTableMapping);
            RelationalModel.CreateColumnMapping(updatedAtColumn, netArea.FindProperty("UpdatedAt")!, netAreaTableMapping);

            var product = FindEntityType("NetworkProviderDe.Domain.Entities.Product")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var networkProviderDeDomainEntitiesProductTableBase = new TableBase("NetworkProviderDe.Domain.Entities.Product", null, relationalModel);
            var activeColumnBase = new ColumnBase<ColumnMappingBase>("Active", "bit", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("Active", activeColumnBase);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var isDiscountedColumnBase = new ColumnBase<ColumnMappingBase>("IsDiscounted", "bit", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("IsDiscounted", isDiscountedColumnBase);
            var isPromotedColumnBase = new ColumnBase<ColumnMappingBase>("IsPromoted", "bit", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("IsPromoted", isPromotedColumnBase);
            var isUnlimitedColumnBase = new ColumnBase<ColumnMappingBase>("IsUnlimited", "bit", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("IsUnlimited", isUnlimitedColumnBase);
            var mrcColumnBase = new ColumnBase<ColumnMappingBase>("Mrc", "int", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("Mrc", mrcColumnBase);
            var productDescriptionColumnBase = new ColumnBase<ColumnMappingBase>("ProductDescription", "nvarchar(1000)", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("ProductDescription", productDescriptionColumnBase);
            var productIdColumnBase = new ColumnBase<ColumnMappingBase>("ProductId", "bigint", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("ProductId", productIdColumnBase);
            var productNameColumnBase = new ColumnBase<ColumnMappingBase>("ProductName", "nvarchar(255)", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("ProductName", productNameColumnBase);
            var productPriceColumnBase = new ColumnBase<ColumnMappingBase>("ProductPrice", "float", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("ProductPrice", productPriceColumnBase);
            var productTypeIdColumnBase = new ColumnBase<ColumnMappingBase>("ProductTypeId", "int", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("ProductTypeId", productTypeIdColumnBase);
            var speedColumnBase = new ColumnBase<ColumnMappingBase>("Speed", "int", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("Speed", speedColumnBase);
            var tdcOtcColumnBase = new ColumnBase<ColumnMappingBase>("TdcOtc", "int", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("TdcOtc", tdcOtcColumnBase);
            var updatedAtColumnBase0 = new ColumnBase<ColumnMappingBase>("UpdatedAt", "datetime2", networkProviderDeDomainEntitiesProductTableBase);
            networkProviderDeDomainEntitiesProductTableBase.Columns.Add("UpdatedAt", updatedAtColumnBase0);
            relationalModel.DefaultTables.Add("NetworkProviderDe.Domain.Entities.Product", networkProviderDeDomainEntitiesProductTableBase);
            var networkProviderDeDomainEntitiesProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, networkProviderDeDomainEntitiesProductTableBase, true);
            networkProviderDeDomainEntitiesProductTableBase.AddTypeMapping(networkProviderDeDomainEntitiesProductMappingBase, false);
            defaultTableMappings0.Add(networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase, product.FindProperty("ProductId")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)activeColumnBase, product.FindProperty("Active")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, product.FindProperty("CreatedAt")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDiscountedColumnBase, product.FindProperty("IsDiscounted")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isPromotedColumnBase, product.FindProperty("IsPromoted")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isUnlimitedColumnBase, product.FindProperty("IsUnlimited")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mrcColumnBase, product.FindProperty("Mrc")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productDescriptionColumnBase, product.FindProperty("ProductDescription")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productNameColumnBase, product.FindProperty("ProductName")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productPriceColumnBase, product.FindProperty("ProductPrice")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productTypeIdColumnBase, product.FindProperty("ProductTypeId")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)speedColumnBase, product.FindProperty("Speed")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tdcOtcColumnBase, product.FindProperty("TdcOtc")!, networkProviderDeDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updatedAtColumnBase0, product.FindProperty("UpdatedAt")!, networkProviderDeDomainEntitiesProductMappingBase);

            var tableMappings0 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var productTable = new Table("Product", null, relationalModel);
            var productIdColumn = new Column("ProductId", "bigint", productTable);
            productTable.Columns.Add("ProductId", productIdColumn);
            var activeColumn = new Column("Active", "bit", productTable);
            productTable.Columns.Add("Active", activeColumn);
            var createdAtColumn0 = new Column("CreatedAt", "datetime2", productTable);
            productTable.Columns.Add("CreatedAt", createdAtColumn0);
            var isDiscountedColumn = new Column("IsDiscounted", "bit", productTable);
            productTable.Columns.Add("IsDiscounted", isDiscountedColumn);
            var isPromotedColumn = new Column("IsPromoted", "bit", productTable);
            productTable.Columns.Add("IsPromoted", isPromotedColumn);
            var isUnlimitedColumn = new Column("IsUnlimited", "bit", productTable);
            productTable.Columns.Add("IsUnlimited", isUnlimitedColumn);
            var mrcColumn = new Column("Mrc", "int", productTable);
            productTable.Columns.Add("Mrc", mrcColumn);
            var productDescriptionColumn = new Column("ProductDescription", "nvarchar(1000)", productTable);
            productTable.Columns.Add("ProductDescription", productDescriptionColumn);
            var productNameColumn = new Column("ProductName", "nvarchar(255)", productTable);
            productTable.Columns.Add("ProductName", productNameColumn);
            var productPriceColumn = new Column("ProductPrice", "float", productTable);
            productTable.Columns.Add("ProductPrice", productPriceColumn);
            var productTypeIdColumn = new Column("ProductTypeId", "int", productTable);
            productTable.Columns.Add("ProductTypeId", productTypeIdColumn);
            var speedColumn = new Column("Speed", "int", productTable);
            productTable.Columns.Add("Speed", speedColumn);
            var tdcOtcColumn = new Column("TdcOtc", "int", productTable);
            productTable.Columns.Add("TdcOtc", tdcOtcColumn);
            var updatedAtColumn0 = new Column("UpdatedAt", "datetime2", productTable);
            productTable.Columns.Add("UpdatedAt", updatedAtColumn0);
            var pK_Product = new UniqueConstraint("PK_Product", productTable, new[] { productIdColumn });
            productTable.PrimaryKey = pK_Product;
            var pK_ProductUc = RelationalModel.GetKey(this,
                "NetworkProviderDe.Domain.Entities.Product",
                new[] { "ProductId" });
            pK_Product.MappedKeys.Add(pK_ProductUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductUc).Add(pK_Product);
            productTable.UniqueConstraints.Add("PK_Product", pK_Product);
            var iX_Product_ProductTypeId = new TableIndex(
            "IX_Product_ProductTypeId", productTable, new[] { productTypeIdColumn }, false);
            var iX_Product_ProductTypeIdIx = RelationalModel.GetIndex(this,
                "NetworkProviderDe.Domain.Entities.Product",
                new[] { "ProductTypeId" });
            iX_Product_ProductTypeId.MappedIndexes.Add(iX_Product_ProductTypeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Product_ProductTypeIdIx).Add(iX_Product_ProductTypeId);
            productTable.Indexes.Add("IX_Product_ProductTypeId", iX_Product_ProductTypeId);
            relationalModel.Tables.Add(("Product", null), productTable);
            var productTableMapping = new TableMapping(product, productTable, true);
            productTable.AddTypeMapping(productTableMapping, false);
            tableMappings0.Add(productTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn, product.FindProperty("ProductId")!, productTableMapping);
            RelationalModel.CreateColumnMapping(activeColumn, product.FindProperty("Active")!, productTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn0, product.FindProperty("CreatedAt")!, productTableMapping);
            RelationalModel.CreateColumnMapping(isDiscountedColumn, product.FindProperty("IsDiscounted")!, productTableMapping);
            RelationalModel.CreateColumnMapping(isPromotedColumn, product.FindProperty("IsPromoted")!, productTableMapping);
            RelationalModel.CreateColumnMapping(isUnlimitedColumn, product.FindProperty("IsUnlimited")!, productTableMapping);
            RelationalModel.CreateColumnMapping(mrcColumn, product.FindProperty("Mrc")!, productTableMapping);
            RelationalModel.CreateColumnMapping(productDescriptionColumn, product.FindProperty("ProductDescription")!, productTableMapping);
            RelationalModel.CreateColumnMapping(productNameColumn, product.FindProperty("ProductName")!, productTableMapping);
            RelationalModel.CreateColumnMapping(productPriceColumn, product.FindProperty("ProductPrice")!, productTableMapping);
            RelationalModel.CreateColumnMapping(productTypeIdColumn, product.FindProperty("ProductTypeId")!, productTableMapping);
            RelationalModel.CreateColumnMapping(speedColumn, product.FindProperty("Speed")!, productTableMapping);
            RelationalModel.CreateColumnMapping(tdcOtcColumn, product.FindProperty("TdcOtc")!, productTableMapping);
            RelationalModel.CreateColumnMapping(updatedAtColumn0, product.FindProperty("UpdatedAt")!, productTableMapping);

            var productArea = FindEntityType("NetworkProviderDe.Domain.Entities.ProductArea")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            productArea.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var networkProviderDeDomainEntitiesProductAreaTableBase = new TableBase("NetworkProviderDe.Domain.Entities.ProductArea", null, relationalModel);
            var areaIdColumnBase0 = new ColumnBase<ColumnMappingBase>("AreaId", "bigint", networkProviderDeDomainEntitiesProductAreaTableBase);
            networkProviderDeDomainEntitiesProductAreaTableBase.Columns.Add("AreaId", areaIdColumnBase0);
            var productAreaIdColumnBase = new ColumnBase<ColumnMappingBase>("ProductAreaId", "bigint", networkProviderDeDomainEntitiesProductAreaTableBase);
            networkProviderDeDomainEntitiesProductAreaTableBase.Columns.Add("ProductAreaId", productAreaIdColumnBase);
            var productIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ProductId", "bigint", networkProviderDeDomainEntitiesProductAreaTableBase);
            networkProviderDeDomainEntitiesProductAreaTableBase.Columns.Add("ProductId", productIdColumnBase0);
            relationalModel.DefaultTables.Add("NetworkProviderDe.Domain.Entities.ProductArea", networkProviderDeDomainEntitiesProductAreaTableBase);
            var networkProviderDeDomainEntitiesProductAreaMappingBase = new TableMappingBase<ColumnMappingBase>(productArea, networkProviderDeDomainEntitiesProductAreaTableBase, true);
            networkProviderDeDomainEntitiesProductAreaTableBase.AddTypeMapping(networkProviderDeDomainEntitiesProductAreaMappingBase, false);
            defaultTableMappings1.Add(networkProviderDeDomainEntitiesProductAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productAreaIdColumnBase, productArea.FindProperty("ProductAreaId")!, networkProviderDeDomainEntitiesProductAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)areaIdColumnBase0, productArea.FindProperty("AreaId")!, networkProviderDeDomainEntitiesProductAreaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase0, productArea.FindProperty("ProductId")!, networkProviderDeDomainEntitiesProductAreaMappingBase);

            var tableMappings1 = new List<TableMapping>();
            productArea.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var productAreaTable = new Table("ProductArea", null, relationalModel);
            var productAreaIdColumn = new Column("ProductAreaId", "bigint", productAreaTable);
            productAreaTable.Columns.Add("ProductAreaId", productAreaIdColumn);
            var areaIdColumn0 = new Column("AreaId", "bigint", productAreaTable);
            productAreaTable.Columns.Add("AreaId", areaIdColumn0);
            var productIdColumn0 = new Column("ProductId", "bigint", productAreaTable);
            productAreaTable.Columns.Add("ProductId", productIdColumn0);
            var pK_ProductArea = new UniqueConstraint("PK_ProductArea", productAreaTable, new[] { productAreaIdColumn });
            productAreaTable.PrimaryKey = pK_ProductArea;
            var pK_ProductAreaUc = RelationalModel.GetKey(this,
                "NetworkProviderDe.Domain.Entities.ProductArea",
                new[] { "ProductAreaId" });
            pK_ProductArea.MappedKeys.Add(pK_ProductAreaUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductAreaUc).Add(pK_ProductArea);
            productAreaTable.UniqueConstraints.Add("PK_ProductArea", pK_ProductArea);
            var iX_ProductArea_AreaId = new TableIndex(
            "IX_ProductArea_AreaId", productAreaTable, new[] { areaIdColumn0 }, false);
            var iX_ProductArea_AreaIdIx = RelationalModel.GetIndex(this,
                "NetworkProviderDe.Domain.Entities.ProductArea",
                new[] { "AreaId" });
            iX_ProductArea_AreaId.MappedIndexes.Add(iX_ProductArea_AreaIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ProductArea_AreaIdIx).Add(iX_ProductArea_AreaId);
            productAreaTable.Indexes.Add("IX_ProductArea_AreaId", iX_ProductArea_AreaId);
            var iX_ProductArea_ProductId = new TableIndex(
            "IX_ProductArea_ProductId", productAreaTable, new[] { productIdColumn0 }, false);
            var iX_ProductArea_ProductIdIx = RelationalModel.GetIndex(this,
                "NetworkProviderDe.Domain.Entities.ProductArea",
                new[] { "ProductId" });
            iX_ProductArea_ProductId.MappedIndexes.Add(iX_ProductArea_ProductIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ProductArea_ProductIdIx).Add(iX_ProductArea_ProductId);
            productAreaTable.Indexes.Add("IX_ProductArea_ProductId", iX_ProductArea_ProductId);
            relationalModel.Tables.Add(("ProductArea", null), productAreaTable);
            var productAreaTableMapping = new TableMapping(productArea, productAreaTable, true);
            productAreaTable.AddTypeMapping(productAreaTableMapping, false);
            tableMappings1.Add(productAreaTableMapping);
            RelationalModel.CreateColumnMapping(productAreaIdColumn, productArea.FindProperty("ProductAreaId")!, productAreaTableMapping);
            RelationalModel.CreateColumnMapping(areaIdColumn0, productArea.FindProperty("AreaId")!, productAreaTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn0, productArea.FindProperty("ProductId")!, productAreaTableMapping);

            var productType = FindEntityType("NetworkProviderDe.Domain.Entities.ProductType")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            productType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var networkProviderDeDomainEntitiesProductTypeTableBase = new TableBase("NetworkProviderDe.Domain.Entities.ProductType", null, relationalModel);
            var createdAtColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", networkProviderDeDomainEntitiesProductTypeTableBase);
            networkProviderDeDomainEntitiesProductTypeTableBase.Columns.Add("CreatedAt", createdAtColumnBase1);
            var productTypeIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ProductTypeId", "int", networkProviderDeDomainEntitiesProductTypeTableBase);
            networkProviderDeDomainEntitiesProductTypeTableBase.Columns.Add("ProductTypeId", productTypeIdColumnBase0);
            var productTypeNameColumnBase = new ColumnBase<ColumnMappingBase>("ProductTypeName", "nvarchar(255)", networkProviderDeDomainEntitiesProductTypeTableBase);
            networkProviderDeDomainEntitiesProductTypeTableBase.Columns.Add("ProductTypeName", productTypeNameColumnBase);
            var updatedAtColumnBase1 = new ColumnBase<ColumnMappingBase>("UpdatedAt", "datetime2", networkProviderDeDomainEntitiesProductTypeTableBase);
            networkProviderDeDomainEntitiesProductTypeTableBase.Columns.Add("UpdatedAt", updatedAtColumnBase1);
            relationalModel.DefaultTables.Add("NetworkProviderDe.Domain.Entities.ProductType", networkProviderDeDomainEntitiesProductTypeTableBase);
            var networkProviderDeDomainEntitiesProductTypeMappingBase = new TableMappingBase<ColumnMappingBase>(productType, networkProviderDeDomainEntitiesProductTypeTableBase, true);
            networkProviderDeDomainEntitiesProductTypeTableBase.AddTypeMapping(networkProviderDeDomainEntitiesProductTypeMappingBase, false);
            defaultTableMappings2.Add(networkProviderDeDomainEntitiesProductTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productTypeIdColumnBase0, productType.FindProperty("ProductTypeId")!, networkProviderDeDomainEntitiesProductTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase1, productType.FindProperty("CreatedAt")!, networkProviderDeDomainEntitiesProductTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productTypeNameColumnBase, productType.FindProperty("ProductTypeName")!, networkProviderDeDomainEntitiesProductTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updatedAtColumnBase1, productType.FindProperty("UpdatedAt")!, networkProviderDeDomainEntitiesProductTypeMappingBase);

            var tableMappings2 = new List<TableMapping>();
            productType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var productTypeTable = new Table("ProductType", null, relationalModel);
            var productTypeIdColumn0 = new Column("ProductTypeId", "int", productTypeTable);
            productTypeTable.Columns.Add("ProductTypeId", productTypeIdColumn0);
            var createdAtColumn1 = new Column("CreatedAt", "datetime2", productTypeTable);
            productTypeTable.Columns.Add("CreatedAt", createdAtColumn1);
            var productTypeNameColumn = new Column("ProductTypeName", "nvarchar(255)", productTypeTable);
            productTypeTable.Columns.Add("ProductTypeName", productTypeNameColumn);
            var updatedAtColumn1 = new Column("UpdatedAt", "datetime2", productTypeTable);
            productTypeTable.Columns.Add("UpdatedAt", updatedAtColumn1);
            var pK_ProductType = new UniqueConstraint("PK_ProductType", productTypeTable, new[] { productTypeIdColumn0 });
            productTypeTable.PrimaryKey = pK_ProductType;
            var pK_ProductTypeUc = RelationalModel.GetKey(this,
                "NetworkProviderDe.Domain.Entities.ProductType",
                new[] { "ProductTypeId" });
            pK_ProductType.MappedKeys.Add(pK_ProductTypeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductTypeUc).Add(pK_ProductType);
            productTypeTable.UniqueConstraints.Add("PK_ProductType", pK_ProductType);
            relationalModel.Tables.Add(("ProductType", null), productTypeTable);
            var productTypeTableMapping = new TableMapping(productType, productTypeTable, true);
            productTypeTable.AddTypeMapping(productTypeTableMapping, false);
            tableMappings2.Add(productTypeTableMapping);
            RelationalModel.CreateColumnMapping(productTypeIdColumn0, productType.FindProperty("ProductTypeId")!, productTypeTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn1, productType.FindProperty("CreatedAt")!, productTypeTableMapping);
            RelationalModel.CreateColumnMapping(productTypeNameColumn, productType.FindProperty("ProductTypeName")!, productTypeTableMapping);
            RelationalModel.CreateColumnMapping(updatedAtColumn1, productType.FindProperty("UpdatedAt")!, productTypeTableMapping);
            var fK_Product_ProductType_ProductTypeId = new ForeignKeyConstraint(
                "FK_Product_ProductType_ProductTypeId", productTable, productTypeTable,
                new[] { productTypeIdColumn },
                productTypeTable.FindUniqueConstraint("PK_ProductType")!, ReferentialAction.Cascade);
            var fK_Product_ProductType_ProductTypeIdFk = RelationalModel.GetForeignKey(this,
                "NetworkProviderDe.Domain.Entities.Product",
                new[] { "ProductTypeId" },
                "NetworkProviderDe.Domain.Entities.ProductType",
                new[] { "ProductTypeId" });
            fK_Product_ProductType_ProductTypeId.MappedForeignKeys.Add(fK_Product_ProductType_ProductTypeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Product_ProductType_ProductTypeIdFk).Add(fK_Product_ProductType_ProductTypeId);
            productTable.ForeignKeyConstraints.Add(fK_Product_ProductType_ProductTypeId);
            productTypeTable.ReferencingForeignKeyConstraints.Add(fK_Product_ProductType_ProductTypeId);
            var fK_ProductArea_NetArea_AreaId = new ForeignKeyConstraint(
                "FK_ProductArea_NetArea_AreaId", productAreaTable, netAreaTable,
                new[] { areaIdColumn0 },
                netAreaTable.FindUniqueConstraint("PK_NetArea")!, ReferentialAction.Cascade);
            var fK_ProductArea_NetArea_AreaIdFk = RelationalModel.GetForeignKey(this,
                "NetworkProviderDe.Domain.Entities.ProductArea",
                new[] { "AreaId" },
                "NetworkProviderDe.Domain.Entities.NetArea",
                new[] { "AreaId" });
            fK_ProductArea_NetArea_AreaId.MappedForeignKeys.Add(fK_ProductArea_NetArea_AreaIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ProductArea_NetArea_AreaIdFk).Add(fK_ProductArea_NetArea_AreaId);
            productAreaTable.ForeignKeyConstraints.Add(fK_ProductArea_NetArea_AreaId);
            netAreaTable.ReferencingForeignKeyConstraints.Add(fK_ProductArea_NetArea_AreaId);
            var fK_ProductArea_Product_ProductId = new ForeignKeyConstraint(
                "FK_ProductArea_Product_ProductId", productAreaTable, productTable,
                new[] { productIdColumn0 },
                productTable.FindUniqueConstraint("PK_Product")!, ReferentialAction.Cascade);
            var fK_ProductArea_Product_ProductIdFk = RelationalModel.GetForeignKey(this,
                "NetworkProviderDe.Domain.Entities.ProductArea",
                new[] { "ProductId" },
                "NetworkProviderDe.Domain.Entities.Product",
                new[] { "ProductId" });
            fK_ProductArea_Product_ProductId.MappedForeignKeys.Add(fK_ProductArea_Product_ProductIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ProductArea_Product_ProductIdFk).Add(fK_ProductArea_Product_ProductId);
            productAreaTable.ForeignKeyConstraints.Add(fK_ProductArea_Product_ProductId);
            productTable.ReferencingForeignKeyConstraints.Add(fK_ProductArea_Product_ProductId);
            return relationalModel.MakeReadOnly();
        }
    }
}
